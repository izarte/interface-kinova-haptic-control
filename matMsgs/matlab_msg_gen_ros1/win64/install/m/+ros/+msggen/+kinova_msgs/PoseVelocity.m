
classdef PoseVelocity < ros.Message
    %PoseVelocity MATLAB implementation of kinova_msgs/PoseVelocity
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.
    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'kinova_msgs/PoseVelocity' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '37cb696ff239fbcc6aa4a04f7318d9da' % The MD5 Checksum of the message definition
        PropertyList = { 'TwistLinearX' 'TwistLinearY' 'TwistLinearZ' 'TwistAngularX' 'TwistAngularY' 'TwistAngularZ' } % List of non-constant message properties
        ROSPropertyList = { 'twist_linear_x' 'twist_linear_y' 'twist_linear_z' 'twist_angular_x' 'twist_angular_y' 'twist_angular_z' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        TwistLinearX
        TwistLinearY
        TwistLinearZ
        TwistAngularX
        TwistAngularY
        TwistAngularZ
    end
    methods
        function set.TwistLinearX(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PoseVelocity', 'TwistLinearX');
            obj.TwistLinearX = single(val);
        end
        function set.TwistLinearY(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PoseVelocity', 'TwistLinearY');
            obj.TwistLinearY = single(val);
        end
        function set.TwistLinearZ(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PoseVelocity', 'TwistLinearZ');
            obj.TwistLinearZ = single(val);
        end
        function set.TwistAngularX(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PoseVelocity', 'TwistAngularX');
            obj.TwistAngularX = single(val);
        end
        function set.TwistAngularY(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PoseVelocity', 'TwistAngularY');
            obj.TwistAngularY = single(val);
        end
        function set.TwistAngularZ(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PoseVelocity', 'TwistAngularZ');
            obj.TwistAngularZ = single(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.kinova_msgs.PoseVelocity.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.kinova_msgs.PoseVelocity(strObj);
        end
    end
end
